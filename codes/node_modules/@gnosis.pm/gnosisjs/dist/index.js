'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _forOwn2 = require('lodash/forOwn');

var _forOwn3 = _interopRequireDefault(_forOwn2);

var _flatMap2 = require('lodash/flatMap');

var _flatMap3 = _interopRequireDefault(_flatMap2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _fromPairs2 = require('lodash/fromPairs');

var _fromPairs3 = _interopRequireDefault(_fromPairs2);

var _defaultsDeep2 = require('lodash/defaultsDeep');

var _defaultsDeep3 = _interopRequireDefault(_defaultsDeep2);

var _truffleContract = require('truffle-contract');

var _truffleContract2 = _interopRequireDefault(_truffleContract);

var _web = require('web3');

var _web2 = _interopRequireDefault(_web);

var _ipfsMini = require('ipfs-mini');

var _ipfsMini2 = _interopRequireDefault(_ipfsMini);

var _lmsr = require('./lmsr');

var lmsr = _interopRequireWildcard(_lmsr);

var _utils = require('./utils');

var utils = _interopRequireWildcard(_utils);

var _oracles = require('./oracles');

var oracles = _interopRequireWildcard(_oracles);

var _events = require('./events');

var events = _interopRequireWildcard(_events);

var _markets = require('./markets');

var markets = _interopRequireWildcard(_markets);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var gasStatsData = require('@gnosis.pm/gnosis-core-contracts/build/gas-stats.json');
var gasLimit = 4e6;
var gasDefaultMaxMultiplier = 1.5;

var implementationInterfaceMap = {
    StandardMarket: ['Market']
};

var contractArtifacts = ['Math', 'Event', 'CategoricalEvent', 'ScalarEvent', 'EventFactory', 'Token', 'EtherToken', 'CentralizedOracle', 'CentralizedOracleFactory', 'UltimateOracle', 'UltimateOracleFactory', 'LMSRMarketMaker', 'Market', 'StandardMarket', 'StandardMarketFactory'].map(function (name) {
    return require('@gnosis.pm/gnosis-core-contracts/build/contracts/' + name + '.json');
});

var instanceModules = [oracles, events, markets];

/**
 * Represents the gnosis.js API
 */

var Gnosis = function () {
    (0, _createClass3.default)(Gnosis, null, [{
        key: 'create',

        /**
         * Factory function for asynchronously creating an instance of the API
         *
         * Note: this method is asynchronous and will return a Promise
         *
         * @param {(string|Provider)} [opts.ethereum] - An instance of a Web3 provider or a URL of a Web3 HTTP provider. If not specified, Web3 provider will be either the browser-injected Web3 (Mist/MetaMask) or an HTTP provider looking at http://localhost:8545
         * @param {Object} [opts.ipfs] - ipfs-mini configuration object
         * @param {string} [opts.ipfs.host='ipfs.infura.io'] - IPFS node address
         * @param {Number} [opts.ipfs.port=5001] - IPFS protocol port
         * @param {string} [opts.ipfs.protocol='https'] - IPFS protocol name
         * @returns {Gnosis} An instance of the gnosis.js API
         */
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(opts) {
                var gnosis;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                opts = (0, _defaultsDeep3.default)(opts || {}, {
                                    ipfs: {
                                        host: 'ipfs.infura.io',
                                        port: 5001,
                                        protocol: 'https'
                                    }
                                });

                                gnosis = new Gnosis(opts);
                                _context.next = 4;
                                return gnosis.initialized(opts);

                            case 4:
                                return _context.abrupt('return', gnosis);

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function create(_x) {
                return _ref.apply(this, arguments);
            }

            return create;
        }()

        /**
         * **Warning:** Do not use constructor directly. Some asynchronous initialization will not be handled. Instead, use {@link Gnosis.create}.
         * @constructor
         */

    }]);

    function Gnosis(opts) {
        var _this = this;

        (0, _classCallCheck3.default)(this, Gnosis);

        // IPFS instantiation
        this.ipfs = utils.promisifyAll(new _ipfsMini2.default(opts.ipfs));

        this.contracts = (0, _fromPairs3.default)(contractArtifacts.map(function (artifact) {
            var c = (0, _truffleContract2.default)(artifact);
            var name = c.contract_name;

            if (gasStatsData[name] != null) {
                c.prototype.gasStats = gasStatsData[name];
                c.addProp('gasStats', function () {
                    return gasStatsData[name];
                });
            }

            return [name, c];
        }));

        (0, _forEach3.default)(this.contracts, function (c, name, cs) {
            var maxGasCost = Math.max.apply(Math, (0, _toConsumableArray3.default)((0, _values2.default)(c.gasStats || {}).map(function (fnStats) {
                return fnStats.max != null ? fnStats.max.gasUsed : -Infinity;
            })).concat((0, _toConsumableArray3.default)((0, _flatMap3.default)(implementationInterfaceMap[name] || [], function (implName) {
                return (0, _values2.default)(cs[implName].gasStats || {}).map(function (fnStats) {
                    return fnStats.max != null ? fnStats.max.gasUsed : -Infinity;
                });
            }))));

            if (maxGasCost > 0) {
                c.defaults({ gas: Math.min(gasLimit, 1.5 * maxGasCost | 0) });
            }
        });

        this.TruffleContract = _truffleContract2.default;

        instanceModules.forEach(function (module) {
            (0, _keys2.default)(module).forEach(function (instanceProp) {
                if (_this[instanceProp] != null && typeof _this[instanceProp].estimateGas === 'function') {
                    _this[instanceProp].estimateGas = _this[instanceProp].estimateGas.bind(_this);
                }
            });
        });
    }

    (0, _createClass3.default)(Gnosis, [{
        key: 'initialized',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(opts) {
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return this.setWeb3Provider(opts.ethereum);

                            case 2:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function initialized(_x2) {
                return _ref2.apply(this, arguments);
            }

            return initialized;
        }()

        /**
         * Setter for the ethereum web3 provider.
         *
         * Note: this method is asynchronous and will return a Promise
         *
         * @param {(string|Provider)} [provider] - An instance of a Web3 provider or a URL of a Web3 HTTP provider. If not specified, Web3 provider will be either the browser-injected Web3 (Mist/MetaMask) or an HTTP provider looking at http://localhost:8545
         */

    }, {
        key: 'setWeb3Provider',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(provider) {
                var _this2 = this;

                var accounts;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                if (!(provider == null)) {
                                    _context3.next = 4;
                                    break;
                                }

                                // Prefer Web3 injected by the browser (Mist/MetaMask)
                                if (typeof web3 !== 'undefined') {
                                    this.web3 = new _web2.default(web3.currentProvider);
                                } else {
                                    this.web3 = new _web2.default(new _web2.default.providers.HttpProvider('http://localhost:8545'));
                                }
                                _context3.next = 13;
                                break;

                            case 4:
                                if (!(typeof provider === 'string')) {
                                    _context3.next = 8;
                                    break;
                                }

                                this.web3 = new _web2.default(new _web2.default.providers.HttpProvider(provider));
                                _context3.next = 13;
                                break;

                            case 8:
                                if (!((typeof provider === 'undefined' ? 'undefined' : (0, _typeof3.default)(provider)) === 'object' && provider.constructor.name.endsWith('Provider'))) {
                                    _context3.next = 12;
                                    break;
                                }

                                this.web3 = new _web2.default(provider);
                                _context3.next = 13;
                                break;

                            case 12:
                                throw new TypeError('provider of type \'' + (typeof provider === 'undefined' ? 'undefined' : (0, _typeof3.default)(provider)) + '\' not supported');

                            case 13:

                                (0, _forOwn3.default)(this.contracts, function (c) {
                                    c.setProvider(_this2.web3.currentProvider);
                                });

                                _context3.next = 16;
                                return utils.promisify(this.web3.eth.getAccounts)();

                            case 16:
                                accounts = _context3.sent;


                                if (accounts.length > 0) {
                                    this.setDefaultAccount(accounts[0]);
                                }

                                _context3.next = 20;
                                return _promise2.default.all([this.trySettingContractInstance('etherToken', this.contracts.EtherToken), this.trySettingContractInstance('standardMarketFactory', this.contracts.StandardMarketFactory), this.trySettingContractInstance('lmsrMarketMaker', this.contracts.LMSRMarketMaker)]);

                            case 20:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function setWeb3Provider(_x3) {
                return _ref3.apply(this, arguments);
            }

            return setWeb3Provider;
        }()
    }, {
        key: 'trySettingContractInstance',
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(instanceName, contract) {
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                _context4.prev = 0;
                                _context4.next = 3;
                                return contract.deployed();

                            case 3:
                                this[instanceName] = _context4.sent;
                                _context4.next = 11;
                                break;

                            case 6:
                                _context4.prev = 6;
                                _context4.t0 = _context4['catch'](0);

                                delete this[instanceName];

                                if (_context4.t0.message.includes('has not been deployed to detected network')) {
                                    _context4.next = 11;
                                    break;
                                }

                                throw _context4.t0;

                            case 11:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this, [[0, 6]]);
            }));

            function trySettingContractInstance(_x4, _x5) {
                return _ref4.apply(this, arguments);
            }

            return trySettingContractInstance;
        }()
    }, {
        key: 'setDefaultAccount',
        value: function setDefaultAccount(account) {
            this.defaultAccount = account;
            (0, _forOwn3.default)(this.contracts, function (c) {
                c.defaults({
                    from: account
                });
            });
        }
    }]);
    return Gnosis;
}();

_assign3.default.apply(undefined, [Gnosis.prototype].concat(instanceModules));
(0, _assign3.default)(Gnosis, lmsr, utils);

exports.default = Gnosis;
module.exports = exports['default'];
//# sourceMappingURL=index.js.map