{"version":3,"sources":["../src/markets.js"],"names":["methodName","functionInputs","name","type","marketAddress","outcomeTokenIndex","outcomeTokenCount","market","contracts","Market","at","Token","Event","eventContract","collateralToken","lmsrMarketMaker","calcCost","baseCost","calcMarketFee","cost","add","approve","buy","purchaseEvent","args","outcomeTokenCost","plus","marketFees","buyOutcomeTokens","outcomeTokens","outcomeToken","calcProfit","baseProfit","minProfit","sub","sell","saleEvent","outcomeTokenProfit","minus","sellOutcomeTokens","createMarket","self","opts","callerContract","marketFactory","callerABI","StandardMarketFactory","abi","eventName","eventArgName","resultContract","argAliases","event","estimateGas","using","gasStats","averageGasUsed","Error"],"mappings":"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","file":"markets.js","sourcesContent":["import {\n    normalizeWeb3Args, wrapWeb3Function,\n    requireEventFromTXResult, sendTransactionAndGetResult\n} from './utils'\n\n/**\n * Creates a market.\n *\n * Note: this method is asynchronous and will return a Promise\n *\n * @function\n * @param {(Contract|string)} opts.event - The forwarded oracle contract or its address\n * @param {(Contract|string)} opts.marketMaker - The collateral token contract or its address\n * @param {(number|string|BigNumber)} opts.fee - The fee factor. Specifying 1,000,000 corresponds to 100%, 50,000 corresponds to 5%, etc.\n * @returns {Contract} The created market contract instance\n * @alias Gnosis#createMarket\n */\nexport const createMarket = wrapWeb3Function((self, opts) => ({\n    callerContract: opts.marketFactory,\n    callerABI: self.contracts.StandardMarketFactory.abi,\n    methodName: 'createMarket',\n    eventName: 'StandardMarketCreation',\n    eventArgName: 'market',\n    resultContract: self.contracts.Market,\n    argAliases: {\n        event: 'eventContract',\n    }\n}))\n\n/**\n * Buys outcome tokens. If you have ether and plan on transacting with a market on an event which\n * uses EtherToken as collateral, be sure to convert the ether into EtherToken by sending ether to\n * the deposit() method of the contract. For other ERC20 collateral tokens, follow the token's\n * acquisition process defined by the token's contract.\n *\n * Note: this method is asynchronous and will return a Promise\n *\n * @param {(Contract|string)} opts.market - The market to buy tokens from\n * @param {(number|string|BigNumber)} opts.outcomeTokenIndex - The index of the outcome\n * @param {(number|string|BigNumber)} opts.outcomeTokenCount - Number of outcome tokens to buy\n * @returns {BigNumber} How much collateral tokens caller paid\n * @alias Gnosis#buyOutcomeTokens\n */\nexport async function buyOutcomeTokens() {\n    const [[marketAddress, outcomeTokenIndex, outcomeTokenCount]] =\n        normalizeWeb3Args(Array.from(arguments), {\n            methodName: 'buyOutcomeTokens',\n            functionInputs: [\n                { name: 'market', type: 'address' },\n                { name: 'outcomeTokenIndex', type: 'uint8'},\n                { name: 'outcomeTokenCount', type: 'uint256'},\n            ]\n        })\n\n    const market = this.contracts.Market.at(marketAddress)\n    const collateralToken = this.contracts.Token.at(\n        await this.contracts.Event.at(\n            await market.eventContract()\n        ).collateralToken()\n    )\n    const baseCost = await this.lmsrMarketMaker.calcCost(marketAddress, outcomeTokenIndex, outcomeTokenCount)\n    const cost = baseCost.add(await market.calcMarketFee(baseCost))\n\n    requireEventFromTXResult(await collateralToken.approve(marketAddress, cost), 'Approval')\n\n    const purchaseEvent = requireEventFromTXResult(\n        await market.buy(outcomeTokenIndex, outcomeTokenCount, cost),\n        'OutcomeTokenPurchase'\n    )\n\n    return purchaseEvent.args.outcomeTokenCost.plus(purchaseEvent.args.marketFees)\n}\n\nbuyOutcomeTokens.estimateGas = async function({ using }) {\n    if(using === 'stats') {\n        return this.contracts.Token.gasStats.approve.averageGasUsed +\n            this.contracts.Market.gasStats.buy.averageGasUsed\n    }\n    throw new Error(`unsupported gas estimation source ${using}`)\n}\n\n\n/**\n * Sells outcome tokens. If transacting with a market which deals with EtherToken as collateral,\n * will need additional step of sending a withdraw(uint amount) transaction to the EtherToken\n * contract if raw ether is desired.\n *\n * Note: this method is asynchronous and will return a Promise\n *\n * @param {(Contract|string)} opts.market - The market to sell tokens to\n * @param {(number|string|BigNumber)} opts.outcomeTokenIndex - The index of the outcome\n * @param {(number|string|BigNumber)} opts.outcomeTokenCount - Number of outcome tokens to sell\n * @returns {BigNumber} How much collateral tokens caller received from sale\n * @alias Gnosis#sellOutcomeTokens\n */\nexport async function sellOutcomeTokens() {\n    const [[marketAddress, outcomeTokenIndex, outcomeTokenCount]] =\n        normalizeWeb3Args(Array.from(arguments), {\n            methodName: 'sellOutcomeTokens',\n            functionInputs: [\n                { name: 'market', type: 'address' },\n                { name: 'outcomeTokenIndex', type: 'uint8'},\n                { name: 'outcomeTokenCount', type: 'uint256'},\n            ]\n        })\n\n    const market = this.contracts.Market.at(marketAddress)\n    const outcomeToken = this.contracts.Token.at(\n        await this.contracts.Event.at(\n            await market.eventContract()\n        ).outcomeTokens(outcomeTokenIndex)\n    )\n    const baseProfit = await this.lmsrMarketMaker.calcProfit(marketAddress, outcomeTokenIndex, outcomeTokenCount)\n    const minProfit = baseProfit.sub(await market.calcMarketFee(baseProfit))\n\n    requireEventFromTXResult(await outcomeToken.approve(marketAddress, outcomeTokenCount), 'Approval')\n\n    const saleEvent = requireEventFromTXResult(\n        await market.sell(outcomeTokenIndex, outcomeTokenCount, minProfit),\n        'OutcomeTokenSale'\n    )\n    return saleEvent.args.outcomeTokenProfit.minus(saleEvent.args.marketFees)\n}\n\nsellOutcomeTokens.estimateGas = async function({ using }) {\n    if(using === 'stats') {\n        return this.contracts.Token.gasStats.approve.averageGasUsed +\n            this.contracts.Market.gasStats.sell.averageGasUsed\n    }\n    throw new Error(`unsupported gas estimation source ${using}`)\n}\n"]}